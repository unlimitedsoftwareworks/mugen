#ifndef MUGEN_H
#define MUGEN_H

#include <stdio.h>

typedef wchar_t* utf8String;

/*
 * Version naming: X.Y.z
 * 
 * Where: X major version: new features
 *        Y minor version: bug fixes
 *        z release version: [a, b, s]
 *                a: alpha
 *                b: beta
 *                s: stable  
 * 
 */

#define MUGEN_VERSION "0.1.a"

#define MUGEN_HELP "\
  M U G E N  (v. %s)\n\n\
Written by Soulaymen Chouri [doit@praisethemoon.org]\n\n\
> Usage: mugen -c input.mu (compiles an input source file)\n\n"

/* define only one these: 
 *  - ASSERT_STANDARD: uses ANSI C assertion, MODERATE PERFORMACE 
 *  - ASSERT_MUGEN: uses MUGEN ASSERT, LOWER PERFROMANCE
 *  - ASSERT_NONE: never asserts, NO COST
 *
 * dont forget to include <assert.h> just in case.
 */

#define ASSERT_MUGEN
/* #define ASSERT_STANDARD */
/* #define ASSERT_NONE */

#if defined(ASSERT_STANDARD)
	#define ASSERT(c ,msg, ...) assert(c)
#elif defined (ASSERT_MUGEN) 
	#define ASSERT(c, msg, ...) mugen_assert(c, #c, msg, ##__VA_ARGS__)
#elif defined (ASSERT_NONE)
 	#define ASSERT(c, msg, ...)
#else 
 	#error Please define an assertion policy.
#endif
/*
 * Assertion.
 * Other parameters are 
 * @param cond condition result
 * @param rawcond raw condition string, generated by the ASSERT macro
 * @param fmt message to be thrown if assertion has failed. String expected is a format. Parameters can be given later. Maximum size is 1024.
 */
void mugen_assert(int cond, const char *rawcond, const char *fmt, ...);
int compile(char *fname);
void displayHelp();
void parseCmdLine();

#endif
